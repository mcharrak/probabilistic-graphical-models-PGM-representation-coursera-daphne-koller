% Copyright (C) Daphne Koller, Stanford University, 2012

function [MEU, OptimalDecisionRule] = OptimizeMEU(I)

% Inputs: An influence diagram I with a single decision node and a single utility node.
%         I.RandomFactors = list of factors for each random variable.  These are CPDs, with
%              the child variable = D.var(1)
%         I.DecisionFactors = factor for the decision node.
%         I.UtilityFactors = list of factors representing conditional utilities.
% Return value: the maximum expected utility of I and an optimal decision rule
% (represented again as a factor) that yields that expected utility.

% We assume I has a single decision node.
% You may assume that there is a unique optimal decision.
D = I.DecisionFactors(1);

% get decision node variable number
D_var = D.var(1);

% caculate utility factor
utility_factor = CalculateExpectedUtilityFactor(I);
disp("This is the utlity factor result:");
disp(utility_factor);

% get column indx and variables of all vars in utility_factor which are not D_var
% not_D_var = setdiff(utility_factor.var,D_var);
idx_not_D_var = find(D_var ~= utility_factor.var); 
% find index of D variable in variables of 
idx_D_var = find(D_var == utility_factor.var);

% count rows in utility factor table
num_U_values = prod(utility_factor.card);

% get assignments of utilityfactor
assignments = IndexToAssignment(1:num_U_values, utility_factor.card);
%disp("These are the assignments:")
%disp(assignments)
% get relevant assigments which do not contain decision node D as column
rel_assignments = assignments(:,idx_not_D_var);

% count number of scenarios we have to make a decision
% cardinality of decision variable D/node
D_cardinality = D.card(1);
n_decisions = prod(utility_factor.card)/D_cardinality;

for i=1:n_decisions
    % get assignment of current decision scenario without decision node D
    % itself
    curr_assignment = IndexToAssignment(i,D.card);
    rel_curr_assignment = curr_assignment(idx_not_D_var);
    
    % find indices of rows where curr_assignment is contained
    rel_idxs = find(ismember(rel_assignments, rel_curr_assignment,'rows') == 1);
    disp("relevant rows this time")
    disp(rel_idxs)
    
    % get competing assignments in utility factor
    competing_assignments = IndexToAssignment(rel_idxs,utility_factor.card);
    disp("competing assignments this time")
    disp(competing_assignments)
    % get competing values in utility factor
    competing_utilities = GetValueOfAssignment(utility_factor,competing_assignments);
    disp("competing utilities this time")
    
    % select winning assignemnt and its value
    [winner_utility, idx_winner] = max(competing_utilities);
    
%    % save winning utility for current scenario decision
%    MEU = MEU + winner_utility;
    
    % assignment of decision i
    winning_assignment = competing_assignments(idx_winner,:);
    disp("winning_assignment")
    disp(winning_assignment)
    loosing_assigments = competing_assignments;
    loosing_assigments(idx_winner,:) = [];
    disp("loosing_assignments")
    disp(loosing_assigments)
    
    % update decisions for this scenario decision
    D = SetValueOfAssignment(D,winning_assignment,1);
    D = SetValueOfAssignment(D,loosing_assigments,0);
    
end    

OptimalDecisionRule = D;
% Factor.val entries have dim: 1xN, therfore use x*y'
MEU = OptimalDecisionRule.val * utility_factor.val';
%MEU = 0;
%OptimalDecisionRule = I.DecisionFactors(1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% YOUR CODE HERE...
%
% Some other information that might be useful for some implementations
% (note that there are multiple ways to implement this):
% 1.  It is probably easiest to think of two cases - D has parents and D
%     has no parents.
% 2.  You may find the Matlab/Octave function setdiff useful.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 
% % 
% % check if decision node D has parents
% D_has_parents = (length(D.var) > 1);
% 
% if D_has_parents
%    % case: D has parents 
% else
%    % case: D has no parents
%    MEU = max(utility_factor.val);
% end    
%     
end
